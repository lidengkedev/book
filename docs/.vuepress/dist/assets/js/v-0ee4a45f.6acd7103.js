(self.webpackChunkbook=self.webpackChunkbook||[]).push([[269],{4454:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-0ee4a45f",path:"/guide/js/ajax.html",title:"Ajax",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"原生请求",slug:"原生请求",children:[{level:3,title:"原生Ajax方法",slug:"原生ajax方法",children:[]}]},{level:2,title:"Jsonp请求",slug:"jsonp请求",children:[{level:3,title:"jsonp前台需要做的处理",slug:"jsonp前台需要做的处理",children:[]},{level:3,title:"http常见的状态码",slug:"http常见的状态码",children:[]},{level:3,title:"HTTP请求头信息",slug:"http请求头信息",children:[]},{level:3,title:"HTTP的响应头信息",slug:"http的响应头信息",children:[]},{level:3,title:"Ajax的优缺点：",slug:"ajax的优缺点",children:[]}]}],filePathRelative:"guide/js/ajax.md",git:{updatedTime:null,contributors:[]}}},8492:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax" aria-hidden="true">#</a> Ajax</h1><p>Ajax(Asynchronous JavaScript and XML),是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><h2 id="原生请求" tabindex="-1"><a class="header-anchor" href="#原生请求" aria-hidden="true">#</a> 原生请求</h2><p>把用户的信息提交到服务器，并把服务器的响应输出</p><p><strong>XMLHttpRequest对象是Ajax技术的核心所在</strong></p><ol><li>生成请求对象，XMLHTTPReQuest，通过该对象和服务器交互</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpReQuest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//非IE</span>\n    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpReQuest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#39;Microsoft.XMLHTTP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>使用open，设置请求方式以及请求的地址，参数名必须和服务器保持一致</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://192.168.1.118:3000/?user=&#39;</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">&#39;&amp;pwd=&#39;</span><span class="token operator">+</span>pwdValue<span class="token punctuation">;</span>\n<span class="token comment">//参数1：请求方式 GET POST</span>\n<span class="token comment">//参数2：请求资源的地址</span>\n<span class="token comment">//参数3：是否异步请求，true,false</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="3"><li>设置请求过程的监控</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//xhr.readyState == 0   初始化中</span>\n    <span class="token comment">//xhr.readyState == 1   调用open</span>\n    <span class="token comment">//xhr.readyState == 2   调用send发送请求</span>\n    <span class="token comment">//xhr.readyState == 3   正在接收数据</span>\n    <span class="token comment">//xhr.readyState == 4   服务器响应完毕</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//服务器返回的状态码判断</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//输出服务器响应的信息</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="4"><li>发送请求</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="原生ajax方法" tabindex="-1"><a class="header-anchor" href="#原生ajax方法" aria-hidden="true">#</a> 原生Ajax方法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> javascriptAjax <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token doc-comment comment">/**\n\t * 判断参数是否为空\n\t * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">data</span>\n\t */</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;{}&#39;</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token doc-comment comment">/**\n\t * 配置参数\n\t * 参数对象转换为字符串拼接\n\t * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">obj</span>\n\t */</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">setParamsConfig</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> dataStr <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\tdataStr <span class="token operator">+=</span> key <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;&amp;&#39;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> dataStr<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//1.生成请求对象，XMLHTTPReQuest，通过该对象和服务器交互</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">createXHR</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\txhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">//非IE</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\txhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> xhr<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//2.使用open，设置请求方式以及请求的地址，参数名必须和服务器保持一致</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">setRequestMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">var</span> type <span class="token operator">=</span> params<span class="token punctuation">.</span>type <span class="token operator">?</span> params<span class="token punctuation">.</span>type <span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">var</span> url <span class="token operator">=</span> params<span class="token punctuation">.</span>url <span class="token operator">?</span> params<span class="token punctuation">.</span>url <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">var</span> async <span class="token operator">=</span> params<span class="token punctuation">.</span>async <span class="token operator">?</span> params<span class="token punctuation">.</span>async <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;get&#39;</span><span class="token operator">:</span>\n\t\t\t\turl <span class="token operator">+=</span> <span class="token string">&#39;?&#39;</span><span class="token operator">+</span> <span class="token function">setParamsConfig</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;post&#39;</span><span class="token operator">:</span>\n\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">default</span><span class="token operator">:</span>\n\t\t\t\t<span class="token keyword">break</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\txhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> async<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> xhr<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//3.设置请求过程的监控</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">listenRequestProcess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">setRequestMethod</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\txhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\tparams<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> xhr<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">//4.发送请求</span>\n\t<span class="token keyword">var</span> <span class="token function-variable function">sendAjax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token function">listenRequestProcess</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\txhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/x-www-form-urlenconded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\txhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">setParamsConfig</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\txhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token keyword">return</span> sendAjax<span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><p>调用方式</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">javascriptAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\ttype<span class="token operator">:</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n\turl<span class="token operator">:</span> <span class="token string">&#39;data/ajax.json&#39;</span><span class="token punctuation">,</span>\n\tasync<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\tdata<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tusername<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="jsonp请求" tabindex="-1"><a class="header-anchor" href="#jsonp请求" aria-hidden="true">#</a> Jsonp请求</h2><blockquote><p>jsonp请求需要后台配合吗？</p></blockquote><p>答案是肯定的。jsonp请求后端必须做配置，否则同样无法获取到数据。</p><blockquote><p>jsonp的缺点</p></blockquote><ul><li>需要后台代码做处理，改动后台代码</li><li>只能使用get请求方式处理jsonp请求</li><li>发送的不是XMLHttpRequest请求</li></ul><h3 id="jsonp前台需要做的处理" tabindex="-1"><a class="header-anchor" href="#jsonp前台需要做的处理" aria-hidden="true">#</a> jsonp前台需要做的处理</h3><blockquote><p>使用jQuery库</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\turl<span class="token operator">:</span> <span class="token string">&#39;http://localhost:8080/test/get&#39;</span><span class="token punctuation">,</span>\n\tdataType<span class="token operator">:</span> <span class="token string">&#39;jsonp&#39;</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>使用原生方式</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> jsonpCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t<span class="token comment">//通过DOM操作在body中追加script标签，使用script标签src属性的特性进行做跨域请求</span>\n\t<span class="token comment">//src的特性： 不存在跨域问题，src连接可以无限制的跨域，不受浏览器同源策略限制</span>\n\t\n\t<span class="token keyword">var</span> <span class="token function-variable function">createScript</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\n\t\t<span class="token keyword">var</span> scriptTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token comment">//添加一个回调函数(必须的),与后台返回请求数据做处理</span>\n\t\t\n\t\tscriptTag<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://localhost:8080/test/get/?callback=headle&#39;</span><span class="token punctuation">;</span> \n\t\tscriptTag<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">;</span>\n\t\t\n\t\tdocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token keyword">return</span> createScript<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">headle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> json<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">jsonpCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token function">headle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取跨域请求返回的数据</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="http常见的状态码" tabindex="-1"><a class="header-anchor" href="#http常见的状态码" aria-hidden="true">#</a> http常见的状态码</h3><p>101: 切换协议，服务器根据客户端请求切换协议</p><p><strong>200: 请求成功。一般用于GET和POST请求</strong></p><p><strong>301: 永久重定向</strong></p><p><strong>302: 临时重定向</strong></p><p>303: 与301类似。使用GET和POST请求查看</p><p><strong>304: 请求资源未修改，使用缓存</strong></p><p>307: 与302类似。使用GET请求重定向</p><p><strong>404: 客户端请求失败</strong></p><p>408: 请求超时</p><p><strong>500: 内部服务器错误，无法完成请求</strong></p><p>505: 服务器不支持请求的HTTP协议的版本，无法完成处理</p><h3 id="http请求头信息" tabindex="-1"><a class="header-anchor" href="#http请求头信息" aria-hidden="true">#</a> HTTP请求头信息</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Accept<span class="token operator">:</span> 客户端支持的数据类型\nAccept<span class="token operator">-</span>Charset<span class="token operator">:</span> 客户端采用的编码\nAccept<span class="token operator">-</span>Encoding<span class="token operator">:</span> 客户端支持的数据压缩格式\nAccept<span class="token operator">-</span>Language<span class="token operator">:</span> 客户端的语言环境\nCookie<span class="token operator">:</span> 客户端的cookie\nHost<span class="token operator">:</span> 请求的服务器地址\nContention<span class="token operator">:</span> 客户端与服务端连接类型\nIf<span class="token operator">-</span>Modified<span class="token operator">-</span>Since<span class="token operator">:</span> 上一次请求资源的缓存时间，与Last<span class="token operator">-</span>Modified对应\nIf<span class="token operator">-</span>None<span class="token operator">-</span>Match<span class="token operator">:</span> 客户端缓存数据的唯一标识，与Etag对应\nReferer<span class="token operator">:</span> 发起请求的源地址\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="http的响应头信息" tabindex="-1"><a class="header-anchor" href="#http的响应头信息" aria-hidden="true">#</a> HTTP的响应头信息</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>content<span class="token operator">-</span>encoding<span class="token operator">:</span> 响应数据的压缩格式\ncontent<span class="token operator">-</span>length<span class="token operator">:</span> 响应数据的长度\ncontent<span class="token operator">-</span>language<span class="token operator">:</span> 语言环境\ncontent<span class="token operator">-</span>type<span class="token operator">:</span> 响应数据的类型\nDate<span class="token operator">:</span> 消息发送的时间\nAge<span class="token operator">:</span> 经过的时间\nEtag<span class="token operator">:</span> 被请求变量的实体值，用于判断请求资源是否发生变化\nExpires<span class="token operator">:</span> 缓存的过期时间\nLast<span class="token operator">-</span>Modified<span class="token operator">:</span> 在服务器端最后被修改的时间\nserver<span class="token operator">:</span> 服务器的型号\nPragma<span class="token operator">:</span> <span class="token function">是否缓存</span><span class="token punctuation">(</span>http1<span class="token punctuation">.</span><span class="token number">0</span>提出<span class="token punctuation">)</span>\nCache<span class="token operator">-</span><span class="token function">Control：是否缓存</span><span class="token punctuation">(</span>http1<span class="token punctuation">.</span><span class="token number">1</span>提出<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="与缓存相关的字段" tabindex="-1"><a class="header-anchor" href="#与缓存相关的字段" aria-hidden="true">#</a> 与缓存相关的字段</h4><ol><li>强缓存 expire 和 cache-control</li><li>对比缓存 Last-Mondified 和 If-Modified-Since Etag 和 If-None-Match</li></ol><h3 id="ajax的优缺点" tabindex="-1"><a class="header-anchor" href="#ajax的优缺点" aria-hidden="true">#</a> Ajax的优缺点：</h3><blockquote><ol><li>优点：</li></ol></blockquote><ul><li>页面无刷新，在页面内与服务器通信，减少用户等待时间，增强了用户体验。</li><li>使用异步方式与服务器通信，响应速度更快。</li><li>可以把一些原本服务器的工作转接到客户端，利用客户端闲置的能力来处理，减轻了服务器和宽带的负担，节约空间和宽带租用成本。</li><li>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</li></ul><blockquote><ol start="2"><li>缺点：</li></ol></blockquote><ul><li>无法进行操作的后腿，既不支持浏览器的页面后退。</li><li>对搜索引擎的支持比较弱。</li><li>可能会影响程序中的异常处理机制。</li><li>安全问题，对一些网站攻击，如scrf、xxs、sql注入等不能很好的防御。</li></ul>',50),t={render:function(n,s){return p}}}}]);