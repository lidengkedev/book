(self.webpackChunkbook=self.webpackChunkbook||[]).push([[317],{5910:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-1b04823a",path:"/guide/js/summary/",title:"JavaScript知识点汇总",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"JS 的数据类型",slug:"js-的数据类型",children:[{level:3,title:"基本类型和引用类型的区别",slug:"基本类型和引用类型的区别",children:[]},{level:3,title:"数据类型判断",slug:"数据类型判断",children:[]},{level:3,title:"浅拷贝和深拷贝",slug:"浅拷贝和深拷贝",children:[]}]},{level:2,title:"作用域和闭包",slug:"作用域和闭包",children:[{level:3,title:"执行上下文和执行栈",slug:"执行上下文和执行栈",children:[]},{level:3,title:"作用域与作用域链",slug:"作用域与作用域链",children:[]},{level:3,title:"闭包",slug:"闭包",children:[]},{level:3,title:"this全面解析",slug:"this全面解析",children:[]}]},{level:2,title:"异步",slug:"异步",children:[{level:3,title:"同步 vs 异步",slug:"同步-vs-异步",children:[]},{level:3,title:"异步和单线程",slug:"异步和单线程",children:[]},{level:3,title:"前端异步的场景",slug:"前端异步的场景",children:[]},{level:3,title:"Event Loop",slug:"event-loop",children:[]}]},{level:2,title:"原型链与继承",slug:"原型链与继承",children:[{level:3,title:"原型与原型链",slug:"原型与原型链",children:[]},{level:3,title:"继承",slug:"继承",children:[]}]},{level:2,title:"DOM操作与BOM操作",slug:"dom操作与bom操作",children:[{level:3,title:"DOM操作",slug:"dom操作",children:[]},{level:3,title:"DOM事件模型和事件流",slug:"dom事件模型和事件流",children:[]},{level:3,title:"事件代理(事件委托)",slug:"事件代理-事件委托",children:[]},{level:3,title:"BOM操作",slug:"bom操作",children:[]},{level:3,title:"Ajax 与跨域",slug:"ajax-与跨域",children:[]},{level:3,title:"存储",slug:"存储",children:[]}]},{level:2,title:"模块化",slug:"模块化",children:[]}],filePathRelative:"guide/js/summary/README.md",git:{updatedTime:null,contributors:[]}}},3121:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="javascript知识点汇总" tabindex="-1"><a class="header-anchor" href="#javascript知识点汇总" aria-hidden="true">#</a> JavaScript知识点汇总</h1><h2 id="js-的数据类型" tabindex="-1"><a class="header-anchor" href="#js-的数据类型" aria-hidden="true">#</a> JS 的数据类型</h2><p>基本类型：</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol (ES6新增)</li></ul><p>引用类型：</p><ul><li>Object</li><li>Array</li><li>Function</li></ul><h3 id="基本类型和引用类型的区别" tabindex="-1"><a class="header-anchor" href="#基本类型和引用类型的区别" aria-hidden="true">#</a> 基本类型和引用类型的区别</h3><p>基本类型和引用类型存储内存的位置不同，基本类型直接存储在栈中，而引用类型存储在堆中，同时在栈中存储了指针，而这个指针指向正式堆中实体的起始位置。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 基本类型</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a\nb <span class="token operator">=</span> <span class="token number">20</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 10</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// 20</span>\n\n\n<span class="token comment">// a，b都是值类型，两者分别赋值，相互之间没有任何影响</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 引用类型</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a\nb<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span>\nb<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">200</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// { x: 100, y: 200 }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// { x: 100, y: 200 }</span>\n\n<span class="token comment">// a,b都是引用类型，</span>\n<span class="token comment">// 在执行b=a之后，修改b的属性值，a的属性值也跟着变化</span>\n<span class="token comment">// 因为a和b都是引用类型，指向了同一个内存地址，</span>\n<span class="token comment">// 即两者引用的是同一个值，</span>\n<span class="token comment">// 因此修改b属性时，a的值也随之改变了。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="数据类型判断" tabindex="-1"><a class="header-anchor" href="#数据类型判断" aria-hidden="true">#</a> 数据类型判断</h3><blockquote><p>typeof</p></blockquote><p>typeof返回一个表示数据类型的字符串，返回结果包括：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;number&quot;</span>\n<span class="token string">&quot;string&quot;</span>\n<span class="token string">&quot;boolean&quot;</span>\n<span class="token string">&quot;symbol&quot;</span>\n<span class="token string">&quot;object&quot;</span>\n<span class="token string">&quot;undefined&quot;</span>\n<span class="token string">&quot;function&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>7种数据类型，但是不能判断 <code>null</code>、<code>array</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// symbol</span>\n<span class="token keyword">typeof</span> <span class="token string">&#39;&#39;</span>               <span class="token comment">// string</span>\n<span class="token keyword">typeof</span> <span class="token number">1</span>                <span class="token comment">// number</span>\n<span class="token keyword">typeof</span> <span class="token boolean">true</span>             <span class="token comment">// boolean</span>\n<span class="token keyword">typeof</span> <span class="token keyword">undefined</span>        <span class="token comment">// undefined</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// function</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span>             <span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>               <span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// object</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>instanceof</p></blockquote><p>instanceof 是用来判断A是否是B的实例，表达式为：<code>A instanceof B</code>,如果A是B的实例则返回<code>true</code>,否则返回<code>false</code></p><p>instanceof 运算符用来测试一个对象在器原型链中是否存在一个构造函数的<code>prototype</code>属性，但是它不能检测<code>null</code>和<code>undefined</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>             <span class="token comment">// true</span>\n<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>            <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span>      <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span>  <span class="token comment">// true</span>\n<span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Null</span>            <span class="token comment">// 报错</span>\n<span class="token keyword">undefined</span> <span class="token keyword">instanceof</span> <span class="token class-name">undefined</span>  <span class="token comment">// 报错</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>严格运算符 ===</p></blockquote><p>只能用于判断 null 和 undefined ,因为这两种类型的值都是唯一的</p><blockquote><p>constructor</p></blockquote><p>constructor 作用和 instanceof 非常相似，但是constructor 检测 Object 与 instanceof 不一样，还可以处理基本数据类型的检测</p><p>不过函数的 contructor 是不稳定的，这个主要体现在把类的原型进行重写，在重写的过程中很有可能出现把之前的 contructor 给覆盖了， 这样检测出来的结果就是不准确的。</p><blockquote><p>Object.prototype.toString.call()</p></blockquote><p>Object.prototype.toString.call()最准确最常用的方式。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>              <span class="token comment">// [object String]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment">// [object Number]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token comment">// [object Boolean]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>       <span class="token comment">// [object Undefined]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token comment">// [Object Null]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [object Function]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// [object Date]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token comment">// [object Array]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// [object RegExp]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// [object Error]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝和深拷贝" aria-hidden="true">#</a> 浅拷贝和深拷贝</h3><p>浅拷贝只复制某一个对象的指针，而不是复制对象本身，新旧对象还是共享同一块内存。</p><p>浅拷贝的实现方式：</p><ul><li>Object.assign(): 需要注意的是目标对象只有一层的时候是深拷贝</li><li>Array.prototype.concat()</li><li>Array.prototype.slice()</li></ul><p>深拷贝就是在拷贝数据的时候，将数据的所有引用结构都拷贝一份。</p><p>简单的来说就是：在内存中存在两个数据结构完全相同又互相独立的数据，将引用类型进行复制，而不是只复制其引用关系。</p><p>深拷贝的实现方式：</p><ul><li>热门的函数库lodash,也有提供_.cloneDeep用来做深拷贝</li><li>jquery 提供一个 $.extend 可以用来做深拷贝</li><li>JSON.parse(JSON.stringify())</li><li>手写递归方法</li></ul><p>递归实现深拷贝的原理：</p><p>要拷贝一个数据，我们肯定要去便利它的属性，如果这个对象的属性仍然是对象，继续使用这个方法，如此往复。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义检测数据类型的功能函数</span>\n\n<span class="token keyword">function</span> <span class="token function">checkedType</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 实现深度克隆 --- 对象/数组</span>\n\n<span class="token keyword">function</span> <span class="token function">clone</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断拷贝的数据类型</span>\n    <span class="token comment">// 初始化变量 result 成为最终克隆的数据</span>\n    <span class="token keyword">let</span> result<span class="token punctuation">,</span>\n        targetType <span class="token operator">=</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> target\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// 遍历目标函数</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 获取遍历数据结构的每一项值</span>\n        <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 判断目标结构中的每一项值是否存在对象/数组</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span> <span class="token operator">||</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 对象/数组里嵌套了对象/数组</span>\n            <span class="token comment">// 继续遍历获取到value值</span>\n            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取到value值最基本的数据类型或者是函数</span>\n            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="作用域和闭包" tabindex="-1"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h2><h3 id="执行上下文和执行栈" tabindex="-1"><a class="header-anchor" href="#执行上下文和执行栈" aria-hidden="true">#</a> 执行上下文和执行栈</h3><h3 id="作用域与作用域链" tabindex="-1"><a class="header-anchor" href="#作用域与作用域链" aria-hidden="true">#</a> 作用域与作用域链</h3><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><h3 id="this全面解析" tabindex="-1"><a class="header-anchor" href="#this全面解析" aria-hidden="true">#</a> this全面解析</h3><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><h3 id="同步-vs-异步" tabindex="-1"><a class="header-anchor" href="#同步-vs-异步" aria-hidden="true">#</a> 同步 vs 异步</h3><h3 id="异步和单线程" tabindex="-1"><a class="header-anchor" href="#异步和单线程" aria-hidden="true">#</a> 异步和单线程</h3><h3 id="前端异步的场景" tabindex="-1"><a class="header-anchor" href="#前端异步的场景" aria-hidden="true">#</a> 前端异步的场景</h3><h3 id="event-loop" tabindex="-1"><a class="header-anchor" href="#event-loop" aria-hidden="true">#</a> Event Loop</h3><h2 id="原型链与继承" tabindex="-1"><a class="header-anchor" href="#原型链与继承" aria-hidden="true">#</a> 原型链与继承</h2><h3 id="原型与原型链" tabindex="-1"><a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a> 原型与原型链</h3><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><h2 id="dom操作与bom操作" tabindex="-1"><a class="header-anchor" href="#dom操作与bom操作" aria-hidden="true">#</a> DOM操作与BOM操作</h2><h3 id="dom操作" tabindex="-1"><a class="header-anchor" href="#dom操作" aria-hidden="true">#</a> DOM操作</h3><h3 id="dom事件模型和事件流" tabindex="-1"><a class="header-anchor" href="#dom事件模型和事件流" aria-hidden="true">#</a> DOM事件模型和事件流</h3><blockquote><p>事件冒泡</p></blockquote><h3 id="事件代理-事件委托" tabindex="-1"><a class="header-anchor" href="#事件代理-事件委托" aria-hidden="true">#</a> 事件代理(事件委托)</h3><h3 id="bom操作" tabindex="-1"><a class="header-anchor" href="#bom操作" aria-hidden="true">#</a> BOM操作</h3><p>BOM (浏览器对象模型)是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览跳转到哪个地址。</p><ul><li>window.screen 对象：包含有关用户屏幕的信息</li><li>window.loaction 对象：用于获得当前页面的地址(URL), 并把浏览器重定向到新页面</li><li>window.history 对象：浏览器历史的前进后退等</li><li>window.navigator 对象：常常用来获取浏览器信息、是否移动端访问等等</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 获取屏幕的宽度和高度</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取网站、协议、path、参数、hash等</span>\n\n<span class="token comment">// 例如当前网址是 https://www.baidu.com/s?ie=utf-8&amp;f=8</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>      <span class="token comment">// https://www.baidu.com/s?ie=utf-8&amp;f=8#some</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span>  <span class="token comment">// https:</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span>  <span class="token comment">// /s</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span>    <span class="token comment">// ?ie=utf-8&amp;f=8</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>      <span class="token comment">// #some</span>\n\n<span class="token comment">// 浏览器的前进、后退功能</span>\n\nhistory<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nhistory<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取浏览器特性 (即俗称的UA) 然后识别客户端，例如判断是不是Chrome浏览器</span>\n\n<span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent\n<span class="token keyword">var</span> isChrome <span class="token operator">=</span> ua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Chrome&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isChrome<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="ajax-与跨域" tabindex="-1"><a class="header-anchor" href="#ajax-与跨域" aria-hidden="true">#</a> Ajax 与跨域</h3><p>Ajax是一种异步请求数据的一种技术手段，对于改善用户的体验和程序的性能很有帮助。</p><h3 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h3><h2 id="模块化" tabindex="-1"><a class="header-anchor" href="#模块化" aria-hidden="true">#</a> 模块化</h2><p>几种常见模块化规范的简介：</p><ul><li>CommonJS 规范主要用于服务端编程，加载模块是同步的，这个并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。</li><li>AMD 规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li>CMD规范与AMD规范很相似。都是用于浏览器编程，依赖就近，延迟执行，可以很容易在node.js中运行。不过依赖SPM打包，模块的加载逻辑偏重ES6在语言标准的层面上，实现了模块功能，而且实现的相当简单，完全可以取代CommonJS和AMD规范，成为了浏览器和服务器通用的模块解决方案。</li></ul>',67),p={render:function(n,s){return e}}}}]);